services:

  books-postgres:
    container_name: ms-books-postgres
    image: postgres:16.4-alpine3.20
    environment:
      POSTGRES_DB: 'books'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'password'
    ports:
      - '5430:5432'

  members-postgres:
    container_name: ms-members-postgres
    image: postgres:16.4-alpine3.20
    environment:
      POSTGRES_DB: 'members'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'password'
    ports:
      - '5431:5432'

  rents-postgres:
    container_name: ms-rents-postgres
    image: postgres:16.4-alpine3.20
    environment:
      POSTGRES_DB: 'rents'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'password'
    ports:
      - '5432:5432'

  config-server:
    container_name: ms-config-server
    build:
      context: ./config-server
    ports:
      - '8888:8888'
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 5s

  discovery-server:
    container_name: ms-discovery-server
    build:
      context: ./discovery-server
    ports:
      - '8761:8761'
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 5s
    depends_on:
      config-server:
        condition: service_healthy

  book-microservice:
    container_name: ms-book-service
    build:
      context: ./book
    ports:
      - '8010:8010'
    depends_on:
      discovery-server:
        condition: service_healthy
      books-postgres:
        condition: service_started

  member-microservice:
    container_name: ms-member-service
    build:
      context: ./member
    ports:
      - '8020:8020'
    depends_on:
      discovery-server:
        condition: service_healthy
      members-postgres:
        condition: service_started

  rent-microservice:
    container_name: ms-rent-service
    build:
      context: ./rent
    ports:
      - '8030:8030'
    depends_on:
      - rents-postgres
      - book-microservice
      - member-microservice

  gateway:
    container_name: ms-gateway
    build:
      context: ./gateway
    ports:
      - '8222:8222'
    depends_on:
      - rent-microservice

  angular-app:
    container_name: ms-angular-app
    build:
      context: ./frontend
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - gateway
